1.primer paso (Crear la imagen de mysql)
-- Visualizar todas las imagenes
docker images
-- Listar imagenes ejecutandose
docker ps
-- Descargar u obtener mysql con docker
docker pull mysql
-- Visualizar todas las imagenes
docker images


2. paso (Crear el network y contenedor de mysql)
-- Listar los network (para poner dentro las imagenes y sus containers)
En caso de querer borrarlo aplicar el siguiente codigo: docker network rm name
docker network ls
-- Crear el network de nombre ecommerce
docker network create ecommerce

-- Listar los network (para poner dentro las imagenes y sus containers)
docker network ls
------------------------
Explicacion:
Creacion de container
nombre de container: bdmysql 
puerto de afuera: 2012
puerto de adentro: 3306 
---------------
3. Ejecutar y levantar la imagen de mysql ()
docker run --name bdmysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 2012:3306 --network ecommerce -d mysql

3.1. Cambiar en MySQL CE un nuevo server con los datos
connection Name: bdmysql
port: 2012
password: my-secret-pw

--**** PaRA CREAR OTRA APARTIR DE AQUÍ
4. Cambiar en el aplication del proyecto netbeans (127.0.0.1)
spring.datasource.url=jdbc:mysql://bdmysql:2012/ApiAuth?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=my-secret-pw
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jooq.sql-dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql: true
server.port=8081

Cuando salia error en pruebas de compilacion
5. Compilamos y configurar en Tools > Options > Java >Maven > Habilitar Skip Tests for

6. Vamos a Files y creamos un archivo en blanco y ponemos FROM openjdk:17-alpine (indica que se va a ejecutar en linux alpine)
Dockerfile

7. CXreamos imagen
-- linux distribucion alpine
FROM openjdk:17-alpine
-- Puerto en que se expone el proyect
EXPOSE 8080
-- Nombre del jar
ARG JAR_FILE=target/ApiAuth-0.0.1-SNAPSHOT.jar
-- Agregar al container y se llama app.jar
ADD ${JAR_FILE} app.jar
-- Executamos
ENTRYPOINT ["java","-jar","/app.jar"]


8.Ejecutar en el powershell (pero ubicate primero en tu carpeta donde creaste tu Dockerfile)
docker build -t apiauth .
docker build -t apicus .
docker build -t apishop .
docker build -t configserver .
9. Deben salir dos imagenes cuando se pone "docker images" (la imagen de apiath o la imagen del proyecto donde creaste tu Dockerfile)

10.  

-d : se ejecuta en background (Para crear contenedor y que lo agregue al ecommerce)
docker run --name apiauth -p 8180:8080 --network ecommerce -d apiauth
docker run --name apicus -p 8280:8080 --network ecommerce -d apicus
docker run --name apishop -p 8380:8080 --network ecommerce -d apishop
docker run --name configserver -p 8480:8080 --network ecommerce -d configserver (Esta mal)

-- Ejecutar proyecto en el netbeans

11. Entramos al localhost:8081/swagger-ui/index.html

12. Visualizar el Swagger

13. Crear un config server (Sirve para centralizar los aplications properties)

14. 
//En aplication.properties escribir y luego compilar y ejecutar para conectar con nuestro repositorio;
server.port=8888
spring.cloud.config.server.git.uri=https://github.com/Dennis-Ciocca-Solis2/properties-ecommerce
spring.cloud.config.server.git.clone-on-start=true


15
//Crear un Dockerfile y escribir
FROM openjdk:17-alpine
EXPOSE 8888
ARG JAR_FILE=target/ConfigServer-0.0.1-SNAPSHOT.jar
ADD ${JAR_FILE} app.jar
ENTRYPOINT ["java","-jar","/app.jar"]

16.
//Creando imagen del Config Server
docker build -t configserver .

17.
//Iniciando nuestro contenedor
docker run -p 8888:8888 --network ecommerce --name configserver -d configserver (esta bien)
